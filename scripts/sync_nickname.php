<?php/** * 修正已经绑定用户的UID *  * @package scripts * @author fengjun <fengj@peptalk.cn> */ini_set('display_errors', 1);ini_set('error_reporting', 'E_ALL & ~E_NOTICE');$args = $_SERVER['argv'];unset($args[0]);define('BETTER_FORCE_INCLUDE', true);define('BETTER_START_TIME', microtime());//	进程锁define('SYNC_BLOG_LOCK', dirname(__FILE__).'/sync_nickname.lock');define('THIS_PID', dirname(__FILE__).'/sync_nickname.pid');//	标定环境为Crondefine('IN_CRON', true); // 定义Better路径defined('APPLICATION_PATH') || define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));defined('APPLICATION_ENV') || define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'production'));function killLock() { 	file_exists(SYNC_BLOG_LOCK) && unlink(SYNC_BLOG_LOCK); }set_time_limit(0);//error_reporting(0);date_default_timezone_set('UTC');// 检测是否有同步锁file_exists(SYNC_BLOG_LOCK) && exit(0);//	没有同步锁则继续执行同步操作register_shutdown_function('killLock');// Ensure library/ is on include_pathset_include_path(implode(PATH_SEPARATOR, array(    realpath(APPLICATION_PATH . '/../library'),    get_include_path(),)));require_once 'Better/Cache.php';require_once 'Better/Cache/Handler/Base.php';require_once 'Better/Loader.php';Better_Loader::getInstance()->register();Better_Config::load();$appConfig = Better_Config::getAppConfig();//	定义常量，减少array_key_exists调用define('BETTER_NOW', time());define('BETTER_BASE_URL', Better_Config::getAppConfig()->base_url);define('BETTER_DB_TBL_PREFIX', Better_Config::getDbConfig()->global->tbl_prefix);define('BETTER_SYS_UID', $appConfig->user->sys_user_id);define('BETTER_VIRTUAL_UID', $appConfig->user->virtual_user_id);define('BETTER_DB_DEBUG', Better_Config::getDbConfig()->global->debug==1 ? true : false);define('BETTER_ENABLE_LOG', $appConfig->log->enable==1 ? true : false);define('BETTER_QBS_DEBUG', $appConfig->qbs->debug==1 ? true : false);define('BETTER_LOG_HASH', md5(uniqid(rand())));define('BETTER_PAGE_SIZE', $appConfig->blog->page_size);define('BETTER_MAX_LIST_ITEMS', $appConfig->blog->list_max_items);define('BETTER_CACHE_HANDLER', $appConfig->cache->handler);define('PHP_EXE', Better_Config::getAppConfig()->php_exe);$sess = Better_Session::factory();$sess->init();$protocols = array(			'sina.com',//			'kaixin001.com',//			'sohu.com',//			'qq.com'			);$rows = Better_DAO_ThirdBinding::getAllBindUser('sina.com');var_dump(count($rows));$i = $c = $f = 0;foreach ($rows as $row) {	echo "\r\n";	try {		$uid = $row['uid'];		$protocol = $row['protocol'];		$avatar = $row['avatar'];		$nickname = $row['nickname'];		$username = $row['username'];		$password = $row['password'];			$oauth_token = $row['oauth_token'];			$oauth_token_secret = $row['oauth_token_secret'];				if ( substr($nickname, 0, 3) != 'kai') {			$c++;			var_dump('c' . $c);			continue;		} 				$uid = $row['uid'];				$service = Better_Service_PushToOtherSites::factory($protocol, $username, $password, $oauth_token, $oauth_token_secret);			if ($service->fakeLogin()) {			var_dump($protocol, $username, $password, $oauth_token, $oauth_token_secret);			$_user = Better_User::getInstance($uid);			$third_info = $service->getInfo();						var_dump('kai nickname:' . $nickname, 'sina nickname:' . $third_info['nickname']);			if ($third_info['nickname']) {				// 需要更新nickname				$third_info = $service->getInfo();				$t_nickname = $third_info['nickname'];				$t_nickname = mb_substr($t_nickname, 0, 6, 'UTF-8');				$t_nickname = checkNickname($t_nickname);				if ($t_nickname ) {					$r = Better_DAO_User::getInstance($uid)->update(array('nickname' => $t_nickname ));					var_dump($uid, $t_nickname, $r);				}				var_dump('update nickname:' . $t_nickname);				}			$i++;			var_dump('i' . $i);				} else {			$f++;			var_dump('f' . $f);		}	} catch (Exception $ee) {		var_dump($ee->getTraceAsString());		continue;	}}var_dump($c, $i, $f);/** *  * @param $nickname * @return unknown_type */function checkNickname($nickname){	$checkid = Better_User_Signup::getInstance(10000)->validNickname($nickname, 0);	switch ($checkid['code']) {		case $checkid['codes']['VALID']:			break;		case $checkid['codes']['NICKNAME_EXISTS']:			$i = 0;																	while($i==0 || $checkid['code'] != $checkid['codes']['VALID']){				$attemp = $nickname . "_" . rand(1, 99);				$checkid = Better_User_Signup::getInstance(10000)->validNickname($attemp, 0);																		$i++;					if ($i > 100) {					$attemp = '';					break;				}										}						$nickname = $attemp;															break;		default:			$nickname = '';			break;	}	return $nickname;}