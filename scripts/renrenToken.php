<?php/** * 修正已经绑定用户的UID *  * @package scripts * @author fengjun <fengj@peptalk.cn> */ini_set('display_errors', 1);ini_set('error_reporting', 'E_ALL & ~E_NOTICE');$args = $_SERVER['argv'];unset($args[0]);define('BETTER_FORCE_INCLUDE', true);define('BETTER_START_TIME', microtime());//	进程锁define('SYNC_BLOG_LOCK', dirname(__FILE__) . '/renrenToken.lock');define('THIS_PID', dirname(__FILE__) . '/renrenToken.pid');//	标定环境为Crondefine('IN_CRON', true); // 定义Better路径defined('APPLICATION_PATH') || define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));defined('APPLICATION_ENV') || define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'production'));function killLock() { 	file_exists(SYNC_BLOG_LOCK) && unlink(SYNC_BLOG_LOCK); }set_time_limit(0);//error_reporting(0);date_default_timezone_set('UTC');// 检测是否有同步锁file_exists(SYNC_BLOG_LOCK) && exit(0);//	没有同步锁则继续执行同步操作register_shutdown_function('killLock');// Ensure library/ is on include_pathset_include_path(implode(PATH_SEPARATOR, array(    realpath(APPLICATION_PATH . '/../library'),    get_include_path(),)));require_once 'Better/Cache.php';require_once 'Better/Cache/Handler/Base.php';require_once 'Better/Loader.php';Better_Loader::getInstance()->register();Better_Config::load();$appConfig = Better_Config::getAppConfig();//	定义常量，减少array_key_exists调用define('BETTER_NOW', time());define('BETTER_BASE_URL', Better_Config::getAppConfig()->base_url);define('BETTER_DB_TBL_PREFIX', Better_Config::getDbConfig()->global->tbl_prefix);define('BETTER_SYS_UID', $appConfig->user->sys_user_id);define('BETTER_VIRTUAL_UID', $appConfig->user->virtual_user_id);define('BETTER_DB_DEBUG', Better_Config::getDbConfig()->global->debug==1 ? true : false);define('BETTER_ENABLE_LOG', $appConfig->log->enable==1 ? true : false);define('BETTER_QBS_DEBUG', $appConfig->qbs->debug==1 ? true : false);define('BETTER_LOG_HASH', md5(uniqid(rand())));define('BETTER_PAGE_SIZE', $appConfig->blog->page_size);define('BETTER_MAX_LIST_ITEMS', $appConfig->blog->list_max_items);define('BETTER_CACHE_HANDLER', $appConfig->cache->handler);define('PHP_EXE', Better_Config::getAppConfig()->php_exe);$tm = time();$rows = Better_DAO_ThirdBinding::getAllBindUser('renren.com');var_dump(count($rows));$s = $f = 0;foreach ($rows as $row) {	$uid = $row['uid'];	$oauth_token = $row['oauth_token'];	$refresh_token = $row['oauth_token_secret'];	if (!$refresh_token) {		echo 'refresh_token None!' , "\r\n";		continue;	}	$expires_in = $row['expires_in'];		if (  ( $expires_in - $tm )  >  604800 ) { //一周 就不要更新了		$f++;		var_dump('f' . $f);		continue;	}		$new_access_token = $new_refresh_token = '';	$new_expires_in = 0;		list($new_access_token, $new_refresh_token, $new_expires_in) = getToken($refresh_token);		if (!$new_access_token) {		$f++;		var_dump('f' . $f);		continue; //失败也跳过		}		//update	$update['oauth_token'] = $new_access_token;	$update['oauth_token_secret'] = $new_refresh_token;	$update['expires_in'] = $tm + $new_expires_in;	$where['uid'] = $uid;	$where['protocol'] = $row['protocol'];		Better_DAO_ThirdBinding::getInstance($uid)->update($update, $where);	$s++;	var_dump('s' . $s);}var_dump($s, $f);/** *  * @param $refresh_token * @return unknown_type */function getToken($refresh_token){	$r = array();		$WB_AKEY = Better_Config::getAppConfig()->oauth->key->renren_akey;	$WB_SKEY = Better_Config::getAppConfig()->oauth->key->renren_skey;			$g['grant_type'] = 'refresh_token';	$g['refresh_token'] = $refresh_token;	$g['client_id'] = $WB_AKEY;	$g['client_secret'] = $WB_SKEY;		$url = 'https://graph.renren.com/oauth/token?' . http_build_query($g);	$str = file_get_contents($url);		$json = json_decode($str);		if ($json->access_token) {		$r = array($json->access_token,  $json->refresh_token, $json->expires_in);	}	return $r;}/** *  * @param $oauth_token * @return unknown_type */function fixExpires($oauth_token){	$tmp = explode('-', $oauth_token);	$tmp = explode('.', $tmp[0]);		$expires_in = array_pop($tmp);		return $expires_in;}